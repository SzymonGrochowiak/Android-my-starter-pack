apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
    }

    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "6g"
    }

    defaultConfig {
        applicationId "com.szymongrochowiak.androidstarterpack"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode versionMajor * 10**4 + versionMinor * 10**3 + versionPatch * 10**2 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    /* TODO #1 #2 This should be uncommented when keys will be attached to the project, uncomment for build types
    signingConfigs {
         // TODO #1 add debug key to the project
        debug {
            storeFile file("debug.keystore")
        }

        // TODO #2 add release key to the project
        releaseConfig {
            storeFile file("other.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    */

    buildTypes {
        debug {
            // TODO #1 uncomment
            //signingConfig signingConfigs.debug
            minifyEnabled false
        }

        release {
            // TODO #2 uncomment
            //signingConfig signingConfigs.releaseConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        full {
        }

        mock {
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Support library
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // Mosby
    compile 'com.hannesdorfmann.mosby3:mvp:3.0.2'

    // Dagger 2
    compile 'com.google.dagger:dagger:2.9'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.9'

    // Gson
    compile 'com.google.code.gson:gson:2.8.0'

    // RxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.7'

    // OkHttp
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'

    // Butterknife
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    // Timber
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Test libraries
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Android test libraries
    androidTestCompile('com.android.support.test:runner:0.5', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('com.android.support.test:rules:0.5', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
}
